function DrawFixationMark(A, E, H, color)
fullWinRes = E.screenResXY;

pixPerCm  = fullWinRes(1) / A.displaySizeCm(1);
pixPerDeg = (pixPerCm * A.viewDistCm) / 180 * pi;  % pix per radian, converted to pix per deg
deadZonePix = round(E.stim.deadZoneDeg * pixPerDeg);
if mod(deadZonePix,2)     % Make it even so that final image won't be 1 pixel shy
    deadZonePix = deadZonePix + 1;
end

monocWidth = (fullWinRes(1) - deadZonePix)/2;
rightEyeOffset = deadZonePix + monocWidth;

presCenter = [ monocWidth/2, fullWinRes(2)/2 ]; % present fixation mark location

fixWidthPx = E.fixationBoxWidthDeg * pixPerDeg;
fixLineWidthPx = E.fixationLineWidthPx;

% Left Eye
Screen('DrawLine', H.screenWindow, ...
    color, presCenter(1), presCenter(2)-0.75*fixWidthPx,  ...
    presCenter(1), presCenter(2)-1.5*fixWidthPx, fixLineWidthPx);
Screen('DrawLine', H.screenWindow, ...
    color, presCenter(1)-0.75*fixWidthPx, presCenter(2),  ...
    presCenter(1)-1.5*fixWidthPx, presCenter(2), fixLineWidthPx);
Screen('FrameRect', H.screenWindow, color, ...
    [presCenter-0.5*fixWidthPx, presCenter+0.5*fixWidthPx], ...
    fixLineWidthPx);
% Right Eye
Screen('DrawLine', H.screenWindow, ...
    color, presCenter(1)+rightEyeOffset, presCenter(2)+0.75*fixWidthPx,  ...
    presCenter(1)+rightEyeOffset, presCenter(2)+1.5*fixWidthPx, fixLineWidthPx);
Screen('DrawLine', H.screenWindow, ...
    color, presCenter(1)+0.75*fixWidthPx+rightEyeOffset, presCenter(2),  ...
    presCenter(1)+1.5*fixWidthPx+rightEyeOffset, presCenter(2), fixLineWidthPx);
Screen('FrameRect', H.screenWindow, color, ...
    [presCenter-0.5*fixWidthPx, presCenter+0.5*fixWidthPx] + [rightEyeOffset 0 rightEyeOffset 0], ...
    fixLineWidthPx);
end